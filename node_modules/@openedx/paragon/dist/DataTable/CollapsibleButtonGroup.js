function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["className", "actions"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useContext, useMemo, useState } from 'react';
import PropTypes from 'prop-types';
import { MoreVert } from '../../icons';
import useToggle from '../hooks/useToggle';
import useWindowSize from '../hooks/useWindowSize';
import DataTableContext from './DataTableContext';
import Icon from '../Icon';
import IconButton from '../IconButton';
import breakpoints from '../utils/breakpoints';
import ModalPopup from '../Modal/ModalPopup';
import Stack from '../Stack';
import Button from '../Button';
export var ACTION_OVERFLOW_BUTTON_TEXT = 'More actions';
export var SMALL_SCREEN_ACTION_OVERFLOW_BUTTON_TEXT = 'Actions';
function CollapsibleButtonGroup(_ref) {
  var className = _ref.className,
    actions = _ref.actions,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useToggle = useToggle(false),
    _useToggle2 = _slicedToArray(_useToggle, 3),
    isOverflowMenuOpen = _useToggle2[0],
    openOverflowMenu = _useToggle2[1],
    closeOverflowMenu = _useToggle2[2];
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    overflowMenuTarget = _useState2[0],
    setOverflowMenuTarget = _useState2[1];
  var _useContext = useContext(DataTableContext),
    _useContext$controlle = _slicedToArray(_useContext.controlledTableSelections, 1),
    isEntireTableSelected = _useContext$controlle[0].isEntireTableSelected,
    selectedFlatRows = _useContext.selectedFlatRows,
    rows = _useContext.rows;
  var _useWindowSize = useWindowSize(),
    width = _useWindowSize.width;
  var selectedRows = selectedFlatRows || rows;
  var _useMemo = useMemo(function () {
      if (width < breakpoints.small.minWidth) {
        // On a small screen, all actions will be in the overflow menu
        return [[], _toConsumableArray(actions)];
      }
      // The first two actions will be displayed as buttons, the rest will go in an overflow menu
      var firstTwoActions = _toConsumableArray(actions).splice(0, 2);
      var extraActions = _toConsumableArray(actions).slice(2);

      /*  Reversing the array because to the user it makes sense to put the primary button first,
          but we want it on the right */
      return [firstTwoActions.reverse(), extraActions];
    }, [actions, width]),
    _useMemo2 = _slicedToArray(_useMemo, 2),
    visibleActions = _useMemo2[0],
    dropdownActions = _useMemo2[1];
  if (!isEntireTableSelected && !selectedRows) {
    return null;
  }
  var cloneAction = function cloneAction(action, index) {
    return /*#__PURE__*/React.cloneElement(action.component, _objectSpread({
      // eslint-disable-next-line react/no-array-index-key
      key: "".concat(action).concat(index),
      as: Button
    }, action.args));
  };
  return /*#__PURE__*/React.createElement("div", _extends({
    className: className
  }, rest), dropdownActions.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    variant: "secondary",
    iconAs: Icon,
    src: MoreVert,
    alt: width > breakpoints.small.minWidth ? ACTION_OVERFLOW_BUTTON_TEXT : SMALL_SCREEN_ACTION_OVERFLOW_BUTTON_TEXT,
    id: "actions-dropdown",
    ref: setOverflowMenuTarget,
    onClick: openOverflowMenu
  }), /*#__PURE__*/React.createElement(ModalPopup, {
    positionRef: overflowMenuTarget,
    onClose: closeOverflowMenu,
    placement: "bottom-end",
    isOpen: isOverflowMenuOpen
  }, /*#__PURE__*/React.createElement("div", {
    className: "pgn__datatable__overflow-actions-menu"
  }, /*#__PURE__*/React.createElement(Stack, {
    gap: 2
  }, dropdownActions.map(cloneAction))))), /*#__PURE__*/React.createElement("div", {
    className: "pgn__datatable__visible-actions"
  }, visibleActions.map(cloneAction)));
}
CollapsibleButtonGroup.defaultProps = {
  className: null
};
CollapsibleButtonGroup.propTypes = {
  /** Class names for the div wrapping the button components */
  className: PropTypes.string,
  /** Array of action objects, containing a component and their callback args */
  actions: PropTypes.arrayOf(PropTypes.shape({
    component: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]).isRequired,
    args: PropTypes.shape({})
  })).isRequired
};
export default CollapsibleButtonGroup;
//# sourceMappingURL=CollapsibleButtonGroup.js.map