{"version":3,"file":"CheckboxFilter.js","names":["React","useRef","useMemo","PropTypes","Form","FormLabel","Badge","Stack","newId","CheckboxFilter","_ref","_ref$column","column","filterValue","setFilter","Header","filterChoices","getHeaderProps","ariaLabel","concat","key","checkedBoxes","changeCheckbox","value","includes","newCheckedBoxes","filter","val","push","headerBasedId","createElement","Group","role","current","id","className","CheckboxSet","name","map","_ref2","number","Checkbox","checked","onChange","direction","gap","undefined","variant","propTypes","shape","func","isRequired","oneOfType","elementType","node","arrayOf","string"],"sources":["../../../src/DataTable/filters/CheckboxFilter.jsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Form, { FormLabel } from '../../Form';\nimport Badge from '../../Badge';\nimport Stack from '../../Stack';\nimport { newId } from '../../utils';\n\nfunction CheckboxFilter({\n  column: {\n    filterValue, setFilter, Header, filterChoices, getHeaderProps,\n  },\n}) {\n  // creates a unique label that does not change on re-render in case there are multiple checkbox filters in the dom\n  const ariaLabel = useRef(newId(`checkbox-filter-label-${getHeaderProps().key}-`));\n\n  const checkedBoxes = filterValue || [];\n  const changeCheckbox = (value) => {\n    if (checkedBoxes.includes(value)) {\n      const newCheckedBoxes = checkedBoxes.filter((val) => val !== value);\n      return setFilter(newCheckedBoxes);\n    }\n    checkedBoxes.push(value);\n    return setFilter(checkedBoxes);\n  };\n  const headerBasedId = useMemo(() => `checkbox-filter-check-${getHeaderProps().key}-`, [getHeaderProps]);\n\n  return (\n    <Form.Group role=\"group\" aria-labelledby={ariaLabel.current}>\n      <FormLabel id={ariaLabel.current} className=\"pgn__checkbox-filter-label\">{Header}</FormLabel>\n      <Form.CheckboxSet name={Header}>\n        {filterChoices.map(({ name, number, value }) => (\n          <Form.Checkbox\n            key={`${headerBasedId}${name}`}\n            value={name}\n            checked={checkedBoxes.includes(value)}\n            onChange={() => changeCheckbox(value)}\n            aria-label={name}\n          >\n            <Stack direction=\"horizontal\" gap={2}>\n              {name} {number !== undefined && <Badge variant=\"light\">{number}</Badge>}\n            </Stack>\n          </Form.Checkbox>\n        ))}\n      </Form.CheckboxSet>\n    </Form.Group>\n  );\n}\n\nCheckboxFilter.propTypes = {\n  /**\n   * Specifies a column object.\n   *\n   * `setFilter`: Function to set the filter value.\n   *\n   * `Header`: Column header used for labels and placeholders.\n   *\n   * `filterChoices`: Specifies array of choices.\n   *\n   * `getHeaderProps`: Generates a key unique to the column being filtered.\n   *\n   * `filterValue`: Value for the filter input.\n   */\n  column: PropTypes.shape({\n    setFilter: PropTypes.func.isRequired,\n    Header: PropTypes.oneOfType([PropTypes.elementType, PropTypes.node]).isRequired,\n    filterChoices: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      number: PropTypes.number,\n    })).isRequired,\n    getHeaderProps: PropTypes.func.isRequired,\n    filterValue: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n};\n\nexport default CheckboxFilter;\n"],"mappings":"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","ignoreList":[]}