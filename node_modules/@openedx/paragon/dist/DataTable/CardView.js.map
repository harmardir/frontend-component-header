{"version":3,"file":"CardView.js","names":["React","useContext","PropTypes","classNames","v4","uuidv4","DataTableContext","useRows","selectColumn","Card","CardGrid","CardItem","_ref","row","prepareRow","isSelectable","SelectionComponent","CardComponent","selectionPlacement","isSelected","createElement","className","DefaultSkeletonCardComponent","isLoading","ImageCap","logoSkeleton","Section","Footer","DEFAULT_SKELETON_CARD_COUNT","CardView","_ref2","columnSizes","_ref2$SkeletonCardCom","SkeletonCardComponent","skeletonCardCount","_useRows","getTableProps","displayRows","_useContext","manualSelectColumn","Cell","_toConsumableArray","Array","map","key","id","defaultProps","undefined","propTypes","shape","getToggleRowSelectedProps","func","bool","isRequired","oneOf","xs","lg","xl","string","number","sm","md"],"sources":["../../src/DataTable/CardView.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\nimport DataTableContext from './DataTableContext';\nimport { useRows } from './hooks';\nimport { selectColumn } from './utils/getVisibleColumns';\nimport Card, { CardGrid } from '../Card';\n\nfunction CardItem({\n  row,\n  prepareRow,\n  isSelectable,\n  SelectionComponent,\n  CardComponent,\n  selectionPlacement,\n}) {\n  prepareRow(row);\n  const { isSelected } = row;\n\n  if (isSelectable && SelectionComponent) {\n    return (\n      <div className={classNames(\n        'pgn__data-table__selectable-card',\n        {\n          'is-selected': isSelected,\n          'selection-right': selectionPlacement === 'right',\n          'selection-left': selectionPlacement !== 'right',\n        },\n      )}\n      >\n        <CardComponent {...row} />\n        <SelectionComponent row={row} />\n      </div>\n    );\n  }\n\n  return <CardComponent {...row} />;\n}\n\nfunction DefaultSkeletonCardComponent() {\n  return (\n    <Card isLoading data-testid=\"default-skeleton-card-component\">\n      <Card.ImageCap logoSkeleton />\n      <Card.Section className=\"pgn__data-table-card-view-default-skeleton-card-section\" />\n      <Card.Footer />\n    </Card>\n  );\n}\n\nexport const DEFAULT_SKELETON_CARD_COUNT = 8;\n\nfunction CardView({\n  columnSizes,\n  CardComponent,\n  className,\n  selectionPlacement,\n  SkeletonCardComponent = DefaultSkeletonCardComponent,\n  skeletonCardCount,\n}) {\n  const {\n    getTableProps, prepareRow, displayRows,\n  } = useRows();\n  const {\n    isSelectable,\n    manualSelectColumn,\n    isLoading,\n  } = useContext(DataTableContext);\n\n  // use the same component for card selection that is used for row selection\n  // otherwise view switching might break if row selection uses component that supports backend filtering / sorting\n  const SelectionComponent = manualSelectColumn?.Cell || selectColumn.Cell;\n\n  if (!getTableProps) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <CardGrid\n        className={classNames('pgn__data-table-card-view', className)}\n        columnSizes={columnSizes}\n      >\n        {[...new Array(skeletonCardCount)].map(() => <SkeletonCardComponent key={uuidv4()} />)}\n      </CardGrid>\n    );\n  }\n\n  return (\n    <CardGrid\n      className={classNames('pgn__data-table-card-view', className)}\n      columnSizes={columnSizes}\n    >\n      {displayRows.map((row) => (\n        <CardItem\n          key={row.id}\n          CardComponent={CardComponent}\n          SelectionComponent={SelectionComponent}\n          isSelectable={isSelectable}\n          row={row}\n          prepareRow={prepareRow}\n          selectionPlacement={selectionPlacement}\n        />\n      ))}\n    </CardGrid>\n  );\n}\n\nCardItem.defaultProps = {\n  SelectionComponent: undefined,\n};\n\nCardItem.propTypes = {\n  row: PropTypes.shape({\n    getToggleRowSelectedProps: PropTypes.func,\n    isSelected: PropTypes.bool,\n  }).isRequired,\n  prepareRow: PropTypes.func.isRequired,\n  isSelectable: PropTypes.bool.isRequired,\n  CardComponent: PropTypes.func.isRequired,\n  SelectionComponent: PropTypes.func,\n  selectionPlacement: PropTypes.oneOf(['right', 'left']).isRequired,\n};\n\nCardView.defaultProps = {\n  columnSizes: {\n    xs: 12,\n    lg: 6,\n    xl: 4,\n  },\n  className: undefined,\n  selectionPlacement: 'right',\n  SkeletonCardComponent: undefined,\n  skeletonCardCount: 8,\n};\n\nCardView.propTypes = {\n  /** The class name for the CardGrid component */\n  className: PropTypes.string,\n  /**\n   * An object containing the desired column size at each breakpoint, following a similar\n   * props API as ``react-bootstrap/Col``\n   */\n  columnSizes: PropTypes.shape({\n    xs: PropTypes.number,\n    sm: PropTypes.number,\n    md: PropTypes.number,\n    lg: PropTypes.number,\n    xl: PropTypes.number,\n  }),\n  /** Your card component must be individualized to your table.\n   * It will be called with props from the \"row\" of data it will display */\n  CardComponent: PropTypes.func.isRequired,\n  /** If the Cards are selectable this prop determines from which side of the Card to show selection component. */\n  selectionPlacement: PropTypes.oneOf(['left', 'right']),\n  /** Overrides default skeleton card component for loading state in CardView */\n  SkeletonCardComponent: PropTypes.func,\n  /** Customize the number of loading skeleton cards to display in CardView */\n  skeletonCardCount: PropTypes.number,\n};\n\nexport default CardView;\n"],"mappings":"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","ignoreList":[]}