{"version":3,"file":"index.js","names":["React","useMemo","PropTypes","IconButtonToggle","_ref","activeValue","onChange","children","iconButtons","Children","map","iconButton","isActive","props","value","cloneElement","onClick","concat","createElement","className","defaultProps","undefined","propTypes","string","func","node","isRequired"],"sources":["../../src/IconButtonToggle/index.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n *\n * @param {object} args arguments\n * @param {boolean} args.activeValue the current value of the active/selected iconButton.\n *                                   if not provided, none of the iconButtons will initially be active\n * @param {Function} args.onChange callback to call when toggle value changes.\n *                                 Receives value of the selected toggle button.\n * @param {Array<IconButton>} args.children children components expected to be IconButton\n * @returns {React.Component} A React component\n */\nfunction IconButtonToggle({ activeValue, onChange, children }) {\n  const iconButtons = useMemo(\n    () => React.Children.map(children, iconButton => {\n      const isActive = iconButton.props.value === activeValue;\n      return React.cloneElement(iconButton, {\n        onClick: () => { onChange(iconButton.props.value); },\n        isActive,\n        'aria-selected': isActive,\n        'data-testid': `icon-btn-val-${iconButton.props.value}`,\n      });\n    }),\n    [children, activeValue, onChange],\n  );\n  return <div className=\"pgn__icon-button-toggle__container\">{iconButtons}</div>;\n}\n\nIconButtonToggle.defaultProps = {\n  onChange: () => {},\n  activeValue: undefined,\n};\n\nIconButtonToggle.propTypes = {\n  /** value to use to check which button to set to active */\n  activeValue: PropTypes.string,\n  /** handler that is passed the currently active button's value when a button is selected */\n  onChange: PropTypes.func,\n  /** child nodes of type `IconButton` (or its subcomponents) to be rendered within toggle group */\n  children: PropTypes.node.isRequired,\n};\n\nexport default IconButtonToggle;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAAAC,IAAA,EAAsC;EAAA,IAAnCC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EACzD,IAAMC,WAAW,GAAGP,OAAO,CACzB;IAAA,OAAMD,KAAK,CAACS,QAAQ,CAACC,GAAG,CAACH,QAAQ,EAAE,UAAAI,UAAU,EAAI;MAC/C,IAAMC,QAAQ,GAAGD,UAAU,CAACE,KAAK,CAACC,KAAK,KAAKT,WAAW;MACvD,oBAAOL,KAAK,CAACe,YAAY,CAACJ,UAAU,EAAE;QACpCK,OAAO,EAAE,SAAAA,QAAA,EAAM;UAAEV,QAAQ,CAACK,UAAU,CAACE,KAAK,CAACC,KAAK,CAAC;QAAE,CAAC;QACpDF,QAAQ,EAARA,QAAQ;QACR,eAAe,EAAEA,QAAQ;QACzB,aAAa,kBAAAK,MAAA,CAAkBN,UAAU,CAACE,KAAK,CAACC,KAAK;MACvD,CAAC,CAAC;IACJ,CAAC,CAAC;EAAA,GACF,CAACP,QAAQ,EAAEF,WAAW,EAAEC,QAAQ,CAClC,CAAC;EACD,oBAAON,KAAA,CAAAkB,aAAA;IAAKC,SAAS,EAAC;EAAoC,GAAEX,WAAiB,CAAC;AAChF;AAEAL,gBAAgB,CAACiB,YAAY,GAAG;EAC9Bd,QAAQ,EAAE,SAAAA,SAAA,EAAM,CAAC,CAAC;EAClBD,WAAW,EAAEgB;AACf,CAAC;AAEDlB,gBAAgB,CAACmB,SAAS,GAAG;EAC3B;EACAjB,WAAW,EAAEH,SAAS,CAACqB,MAAM;EAC7B;EACAjB,QAAQ,EAAEJ,SAAS,CAACsB,IAAI;EACxB;EACAjB,QAAQ,EAAEL,SAAS,CAACuB,IAAI,CAACC;AAC3B,CAAC;AAED,eAAevB,gBAAgB","ignoreList":[]}