function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useLayoutEffect, useState } from 'react';

/**
 * This hook will find the index of the last child of a containing element
 * that fits within its bounding rectangle. This is done by summing the widths
 * of the children until they exceed the width of the container.
 *
 * @param {Element} containerElementRef - container element
 * @param {Element} overflowElementRef - overflow element
 *
 * The hook returns the index of the last visible child.
 */
var useIndexOfLastVisibleChild = function useIndexOfLastVisibleChild(containerElementRef, overflowElementRef) {
  var _useState = useState(-1),
    _useState2 = _slicedToArray(_useState, 2),
    indexOfLastVisibleChild = _useState2[0],
    setIndexOfLastVisibleChild = _useState2[1];
  useLayoutEffect(function () {
    function updateLastVisibleChildIndex() {
      // Get array of child nodes from NodeList form
      var childNodesArr = Array.prototype.slice.call(containerElementRef.children);
      var _childNodesArr$filter = childNodesArr
        // filter out the overflow element
        .filter(function (childNode) {
          return childNode !== overflowElementRef;
        })
        // sum the widths to find the last visible element's index
        .reduce(function (acc, childNode, index) {
          acc.sumWidth += childNode.getBoundingClientRect().width;
          if (acc.sumWidth <= containerElementRef.getBoundingClientRect().width) {
            acc.nextIndexOfLastVisibleChild = index;
          }
          return acc;
        }, {
          // Include the overflow element's width to begin with. Doing this means
          // sometimes we'll show a dropdown with one item in it when it would fit,
          // but allowing this case dramatically simplifies the calculations we need
          // to do above.
          sumWidth: overflowElementRef ? overflowElementRef.getBoundingClientRect().width : 0,
          nextIndexOfLastVisibleChild: -1
        }),
        nextIndexOfLastVisibleChild = _childNodesArr$filter.nextIndexOfLastVisibleChild;
      setIndexOfLastVisibleChild(nextIndexOfLastVisibleChild);
    }
    if (containerElementRef) {
      updateLastVisibleChildIndex();
      var resizeObserver = new ResizeObserver(function () {
        return updateLastVisibleChildIndex();
      });
      resizeObserver.observe(containerElementRef);
      return function () {
        return resizeObserver.disconnect();
      };
    }
    return undefined;
  }, [containerElementRef, overflowElementRef]);
  return indexOfLastVisibleChild;
};
export default useIndexOfLastVisibleChild;
//# sourceMappingURL=useIndexOfLastVisibleChild.js.map