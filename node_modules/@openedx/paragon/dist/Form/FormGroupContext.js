function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { newId } from '../utils';
import { useIdList, omitUndefinedProperties } from './fieldUtils';
import { FORM_CONTROL_SIZES } from './constants';
var identityFn = function identityFn(props) {
  return props;
};
var noop = function noop() {};
var FormGroupContext = /*#__PURE__*/React.createContext({
  getControlProps: identityFn,
  useSetIsControlGroupEffect: noop,
  getLabelProps: identityFn,
  getDescriptorProps: identityFn,
  hasFormGroupProvider: false
});
var useFormGroupContext = function useFormGroupContext() {
  return React.useContext(FormGroupContext);
};
var useStateEffect = function useStateEffect(initialState) {
  var _useState = useState(initialState),
    _useState2 = _slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var useSetStateEffect = function useSetStateEffect(newState) {
    useEffect(function () {
      return setState(newState);
    }, [newState]);
  };
  return [state, useSetStateEffect];
};
function FormGroupContextProvider(_ref) {
  var children = _ref.children,
    explicitControlId = _ref.controlId,
    isInvalid = _ref.isInvalid,
    isValid = _ref.isValid,
    size = _ref.size;
  var controlId = useMemo(function () {
    return explicitControlId || newId('form-field');
  }, [explicitControlId]);
  var _useIdList = useIdList(controlId),
    _useIdList2 = _slicedToArray(_useIdList, 2),
    describedByIds = _useIdList2[0],
    registerDescriptorId = _useIdList2[1];
  var _useIdList3 = useIdList(controlId),
    _useIdList4 = _slicedToArray(_useIdList3, 2),
    labelledByIds = _useIdList4[0],
    registerLabelerId = _useIdList4[1];
  var _useStateEffect = useStateEffect(false),
    _useStateEffect2 = _slicedToArray(_useStateEffect, 2),
    isControlGroup = _useStateEffect2[0],
    useSetIsControlGroupEffect = _useStateEffect2[1];
  var getControlProps = useCallback(function (controlProps) {
    // labelledByIds from the list above should only be added to a control
    // if it the control is a group. We prefer adding a condition here because:
    //    - Hooks cannot be called inside conditionals
    //    - The getLabelProps function below is forced to generate an id
    //      whether it is needed or not.
    //    - This is what allows consumers of Paragon to use <Form.Label>
    //      interchangeably between ControlGroup type controls and regular Controls
    var labelledByIdsForControl = isControlGroup ? labelledByIds : undefined;
    return omitUndefinedProperties(_objectSpread(_objectSpread({}, controlProps), {}, {
      'aria-describedby': classNames(controlProps['aria-describedby'], describedByIds) || undefined,
      'aria-labelledby': classNames(controlProps['aria-labelledby'], labelledByIdsForControl) || undefined,
      id: controlId
    }));
  }, [isControlGroup, describedByIds, labelledByIds, controlId]);
  var getLabelProps = function getLabelProps(labelProps) {
    var id = registerLabelerId(labelProps === null || labelProps === void 0 ? void 0 : labelProps.id);
    if (isControlGroup) {
      return _objectSpread(_objectSpread({}, labelProps), {}, {
        id: id
      });
    }
    return _objectSpread(_objectSpread({}, labelProps), {}, {
      htmlFor: controlId
    });
  };
  var getDescriptorProps = function getDescriptorProps(descriptorProps) {
    var id = registerDescriptorId(descriptorProps === null || descriptorProps === void 0 ? void 0 : descriptorProps.id);
    return _objectSpread(_objectSpread({}, descriptorProps), {}, {
      id: id
    });
  };
  var contextValue = {
    getControlProps: getControlProps,
    getLabelProps: getLabelProps,
    getDescriptorProps: getDescriptorProps,
    useSetIsControlGroupEffect: useSetIsControlGroupEffect,
    isControlGroup: isControlGroup,
    controlId: controlId,
    isInvalid: isInvalid,
    isValid: isValid,
    size: size,
    hasFormGroupProvider: true
  };
  return /*#__PURE__*/React.createElement(FormGroupContext.Provider, {
    value: contextValue
  }, children);
}
FormGroupContextProvider.propTypes = {
  children: PropTypes.node.isRequired,
  controlId: PropTypes.string,
  isInvalid: PropTypes.bool,
  isValid: PropTypes.bool,
  size: PropTypes.oneOf([FORM_CONTROL_SIZES.SMALL, FORM_CONTROL_SIZES.LARGE])
};
FormGroupContextProvider.defaultProps = {
  controlId: undefined,
  isInvalid: undefined,
  isValid: undefined,
  size: undefined
};
export { FormGroupContext, FormGroupContextProvider, useFormGroupContext };
//# sourceMappingURL=FormGroupContext.js.map