function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["isIndeterminate"],
  _excluded2 = ["children", "className", "helperText"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import FormCheckbox from './FormCheckbox';
import { useFormGroupContext } from './FormGroupContext';
var SwitchControl = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var isIndeterminate = _ref.isIndeterminate,
    props = _objectWithoutProperties(_ref, _excluded);
  var defaultRef = React.useRef();
  var resolvedRef = ref || defaultRef;
  var _useFormGroupContext = useFormGroupContext(),
    getControlProps = _useFormGroupContext.getControlProps;
  var checkboxProps = getControlProps(_objectSpread(_objectSpread({}, props), {}, {
    className: classNames('pgn__form-switch-input', props.className)
  }));
  React.useEffect(function () {
    // this if(resolvedRef.current) prevents console errors in testing
    if (resolvedRef.current) {
      resolvedRef.current.indeterminate = isIndeterminate;
    }
  }, [resolvedRef, isIndeterminate]);
  return /*#__PURE__*/React.createElement("input", _extends({
    type: "checkbox"
  }, checkboxProps, {
    ref: resolvedRef
  }));
});
SwitchControl.propTypes = {
  /** Specifies whether input should be rendered in indeterminate state. */
  isIndeterminate: PropTypes.bool,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string
};
SwitchControl.defaultProps = {
  isIndeterminate: false,
  className: undefined
};
var FormSwitch = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var children = _ref2.children,
    className = _ref2.className,
    helperText = _ref2.helperText,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/React.createElement("div", {
    className: "d-inline-flex flex-column"
  }, /*#__PURE__*/React.createElement(FormCheckbox, _extends({
    className: classNames('pgn__form-switch', className)
  }, props, {
    role: "switch",
    ref: ref,
    controlAs: SwitchControl
    // ignore the following props for form switch
    ,
    isValid: null,
    isInvalid: null,
    description: null
  }), children), helperText && /*#__PURE__*/React.createElement("div", {
    className: "pgn__form-switch-helper-text"
  }, helperText));
});
FormSwitch.propTypes = {
  /** Specifies contents of the component. */
  children: PropTypes.node.isRequired,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies class name to append to the label element. */
  labelClassName: PropTypes.string,
  /** Specifies helper text to display below the switch. */
  helperText: PropTypes.node,
  /** Determines whether the label should float to the left when the switch is active. */
  floatLabelLeft: PropTypes.bool
};
FormSwitch.defaultProps = {
  className: undefined,
  labelClassName: undefined,
  helperText: undefined,
  floatLabelLeft: false
};
export { SwitchControl };
export default FormSwitch;
//# sourceMappingURL=FormSwitch.js.map