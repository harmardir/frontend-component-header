function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { callAllHandlers } from './fieldUtils';
var identityFn = function identityFn(props) {
  return props;
};
var FormCheckboxSetContext = /*#__PURE__*/React.createContext({
  getCheckboxControlProps: identityFn,
  hasCheckboxSetProvider: false
});
var useCheckboxSetContext = function useCheckboxSetContext() {
  return useContext(FormCheckboxSetContext);
};
function FormCheckboxSetContextProvider(_ref) {
  var children = _ref.children,
    name = _ref.name,
    onBlur = _ref.onBlur,
    onFocus = _ref.onFocus,
    onChange = _ref.onChange,
    value = _ref.value,
    defaultValue = _ref.defaultValue;
  var isControlled = !defaultValue && Array.isArray(value);
  var getCheckboxControlProps = function getCheckboxControlProps(checkboxProps) {
    return _objectSpread(_objectSpread({}, checkboxProps), {}, {
      name: name,
      /* istanbul ignore next */
      onBlur: checkboxProps.onBlur ? callAllHandlers(onBlur, checkboxProps.onBlur) : onBlur,
      /* istanbul ignore next */
      onFocus: checkboxProps.onFocus ? callAllHandlers(onFocus, checkboxProps.onFocus) : onFocus,
      /* istanbul ignore next */
      onChange: checkboxProps.onChange ? callAllHandlers(onChange, checkboxProps.onChange) : onChange,
      checked: isControlled ? value.includes(checkboxProps.value) : undefined,
      defaultChecked: isControlled ? undefined : defaultValue && defaultValue.includes(checkboxProps.value)
    });
  };
  var contextValue = {
    name: name,
    value: value,
    defaultValue: defaultValue,
    getCheckboxControlProps: getCheckboxControlProps,
    onBlur: onBlur,
    onFocus: onFocus,
    onChange: onChange,
    hasCheckboxSetProvider: true
  };
  return /*#__PURE__*/React.createElement(FormCheckboxSetContext.Provider, {
    value: contextValue
  }, children);
}
FormCheckboxSetContextProvider.propTypes = {
  children: PropTypes.node.isRequired,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onChange: PropTypes.func,
  value: PropTypes.arrayOf(PropTypes.string),
  defaultValue: PropTypes.arrayOf(PropTypes.string)
};
FormCheckboxSetContextProvider.defaultProps = {
  onBlur: undefined,
  name: undefined,
  onFocus: undefined,
  onChange: undefined,
  value: undefined,
  defaultValue: undefined
};
export default FormCheckboxSetContext;
export { useCheckboxSetContext, FormCheckboxSetContextProvider };
//# sourceMappingURL=FormCheckboxSetContext.js.map