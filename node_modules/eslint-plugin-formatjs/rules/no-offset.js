"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = exports.name = void 0;
const icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
const util_1 = require("../util");
function verifyAst(ast) {
    const errors = [];
    for (const el of ast) {
        if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            if (el.offset) {
                errors.push({ messageId: 'noOffset', data: {} });
            }
            const { options } = el;
            for (const selector of Object.keys(options)) {
                errors.push(...verifyAst(options[selector].value));
            }
        }
    }
    return errors;
}
function checkNode(context, node) {
    const settings = (0, util_1.getSettings)(context);
    const msgs = (0, util_1.extractMessages)(node, settings);
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        const errors = verifyAst((0, icu_messageformat_parser_1.parse)(defaultMessage, {
            ignoreTag: settings.ignoreTag,
        }));
        for (const error of errors) {
            context.report({
                node: messageNode,
                ...error,
            });
        }
    }
}
exports.name = 'no-offset';
exports.rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow offset in plural rules',
            url: 'https://formatjs.io/docs/tooling/linter#no-offset',
        },
        fixable: 'code',
        messages: {
            noOffset: 'offset is not allowed',
        },
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        //@ts-expect-error defineTemplateBodyVisitor exists in Vue parser
        if (context.parserServices.defineTemplateBodyVisitor) {
            //@ts-expect-error
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
